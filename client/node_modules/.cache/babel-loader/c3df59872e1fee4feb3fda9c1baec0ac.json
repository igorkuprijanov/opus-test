{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Me\\\\Desktop\\\\opus\\\\client\\\\src\\\\components\\\\Main.tsx\";\nimport React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport LogInPage from './LogInPage';\nimport InterfacePage from './InterfacePage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sendData = async (data, url, method) => {\n      const response = await fetch(`http://localhost:4000/${url}`, {\n        method,\n        mode: 'cors',\n        headers: this.requestInterceptor(),\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }).then(async res => {\n        if (res.status === 401) {\n          console.log(Error(res.statusText)); // eslint-disable-line\n\n          const newData = await this.responseInterceptor(data, url, method).then(interceptorResponse => interceptorResponse);\n          return newData;\n        }\n\n        return res.json().then(json => json);\n      });\n      return response;\n    };\n\n    this.requestInterceptor = () => {\n      const token = localStorage.getItem('token');\n\n      if (!token) {\n        return new Headers({\n          'Content-Type': 'application/json'\n        });\n      }\n\n      return new Headers({\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      });\n    };\n\n    this.responseInterceptor = async (data, url, method) => {\n      const refreshToken = localStorage.getItem('refreshToken');\n      const token = localStorage.getItem('token');\n\n      try {\n        await fetch('http://localhost:4000/refresh', {\n          method: 'POST',\n          mode: 'cors',\n          headers: new Headers({\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }),\n          body: JSON.stringify({\n            refreshToken\n          })\n        }).then(response => {\n          if (response.ok) {\n            return response.json().then(async json => {\n              localStorage.setItem('token', json.newTokens.accessToken);\n              localStorage.setItem('refreshToken', json.newTokens.refreshToken);\n            });\n          }\n\n          if (!response.ok) {\n            throw Error(response.statusText);\n          }\n        });\n      } catch (error) {\n        console.log(error); // eslint-disable-line\n      }\n\n      const interceptorResponse = await this.sendData(data, url, method);\n      return interceptorResponse;\n    };\n\n    this.sendLogin = async data => {\n      const response = await this.sendData(data, 'login', 'POST');\n\n      if (response.status) {\n        await this.getAllUsers(response.accessToken);\n        localStorage.setItem('token', response.accessToken);\n        localStorage.setItem('refreshToken', response.refreshToken);\n        this.setState({\n          isActive: response.data.isActive,\n          isLoggedIn: true,\n          user: response.data.email.toString(),\n          showMessage: false,\n          message: {\n            head: '',\n            body: ''\n          }\n        });\n      } else if (!response.status) {\n        this.setState({\n          showMessage: true,\n          message: {\n            head: response.data.head,\n            body: response.data.body\n          }\n        });\n      }\n    };\n\n    this.sendCreateAccount = async (data, byUser) => {\n      // eslint-disable-line\n      if (data.password === data.repeatPassword) {\n        const destination = (() => byUser ? 'addUser' : 'registration')();\n\n        const response = await this.sendData(data, destination, 'POST');\n\n        if (response.status) {\n          if (this.state.openPopup) {\n            this.setState({\n              openPopup: false,\n              unsortedUsers: [...this.state.unsortedUsers, {\n                name: data.email,\n                logs: []\n              }],\n              sortedUsers: this.sortUsers([...this.state.unsortedUsers, {\n                name: data.email,\n                logs: []\n              }]) // eslint-disable-line\n\n            });\n          }\n\n          this.setState({\n            showMessage: true,\n            message: {\n              head: response.data.head,\n              body: response.data.body\n            }\n          });\n        } else if (!response.status) {\n          this.setState({\n            showMessage: true,\n            message: {\n              head: response.data.head,\n              body: response.data.body\n            }\n          });\n        }\n      } else {\n        this.setState({\n          showMessage: true,\n          message: {\n            head: 'Passwords dont match',\n            body: 'Check that both password fields are the same.'\n          }\n        });\n      }\n    };\n\n    this.deleteUser = async name => {\n      await this.sendData({\n        email: name\n      }, 'delete', 'DELETE').then(response => {\n        if (!response.status) {\n          alert('Could not delete user, please try again'); // eslint-disable-line\n        } else {\n          this.popup('delete');\n          const newUsers = this.state.unsortedUsers;\n          const user = newUsers.find(user => user.name === name ? user : null);\n\n          if (user) {\n            const userIndex = newUsers.indexOf(user);\n            newUsers.splice(userIndex, 1);\n          }\n\n          this.setState({\n            unsortedUsers: newUsers,\n            sortedUsers: this.sortUsers(newUsers)\n          });\n        }\n      });\n    };\n\n    this.getAllUsers = async token => {\n      try {\n        await fetch('http://localhost:4000/users', {\n          method: 'GET',\n          mode: 'cors',\n          headers: new Headers({\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          })\n        }).then(response => {\n          if (response.ok) {\n            return response.json().then(json => {\n              this.setState({\n                unsortedUsers: json,\n                sortedUsers: this.sortUsers(json)\n              });\n            });\n          }\n\n          if (!response.ok) {\n            throw Error(response.statusText);\n          }\n        });\n      } catch (error) {\n        console.log(error); // eslint-disable-line\n      }\n    };\n\n    this.logOut = async () => {\n      const refreshToken = localStorage.getItem('refreshToken');\n      await this.sendData({\n        refreshToken\n      }, 'logout', 'POST');\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n      this.setState({\n        isLoggedIn: false,\n        showMessage: false,\n        message: {\n          head: '',\n          body: ''\n        }\n      });\n    };\n\n    this.sendResetPassword = async data => {\n      const response = await this.sendData(data, 'restore', 'POST');\n      this.setState({\n        showMessage: true,\n        message: {\n          head: response.data.head,\n          body: response.data.body\n        }\n      });\n    };\n\n    this.hideMessage = () => {\n      this.setState({\n        showMessage: false\n      });\n    };\n\n    this.sortUsers = data => {\n      const newUsers = [];\n\n      for (let i = 0; i < data.length; i += 1) {\n        const {\n          usersOnPage\n        } = this.state;\n        const sliceableArray = data.slice(i * usersOnPage, usersOnPage * (i + 1));\n\n        if (sliceableArray.length > 0) {\n          newUsers.push(sliceableArray);\n        }\n      }\n\n      return newUsers;\n    };\n\n    this.popup = type => {\n      if (type === 'add') {\n        this.setState({\n          openPopup: !this.state.openPopup,\n          addingUser: true,\n          showMessage: false,\n          message: {\n            head: '',\n            body: ''\n          }\n        });\n      } else {\n        this.setState({\n          openPopup: !this.state.openPopup,\n          addingUser: false\n        });\n      }\n    };\n\n    this.state = {\n      isLoggedIn: false,\n      user: '',\n      showMessage: false,\n      message: {\n        body: '',\n        head: ''\n      },\n      openPopup: false,\n      addingUser: false,\n      unsortedUsers: [],\n      sortedUsers: [],\n      isLoading: false,\n      isActive: false,\n      usersOnPage: 6\n    };\n    this.sendData = this.sendData.bind(this);\n    this.sendLogin = this.sendLogin.bind(this);\n    this.sendCreateAccount = this.sendCreateAccount.bind(this);\n    this.sendResetPassword = this.sendResetPassword.bind(this);\n  }\n\n  async componentDidMount() {\n    const refreshToken = localStorage.getItem('refreshToken');\n\n    if (refreshToken) {\n      this.setState({\n        isLoading: true\n      });\n\n      try {\n        await fetch('http://localhost:4000/refresh', {\n          method: 'POST',\n          mode: 'cors',\n          headers: new Headers({\n            'Content-Type': 'application/json'\n          }),\n          body: JSON.stringify({\n            refreshToken\n          })\n        }).then(response => {\n          if (response.ok) {\n            return response.json().then(async json => {\n              await this.getAllUsers(json.newTokens.accessToken);\n              localStorage.setItem('token', json.newTokens.accessToken);\n              localStorage.setItem('refreshToken', json.newTokens.refreshToken);\n              this.setState({\n                isActive: json.user.isActive,\n                isLoggedIn: true,\n                user: json.user.email.toString(),\n                showMessage: false,\n                message: {\n                  head: '',\n                  body: ''\n                }\n              });\n            });\n          }\n\n          if (!response.ok) {\n            throw Error(response.statusText);\n          }\n        });\n      } catch (error) {\n        console.log(error); // eslint-disable-line\n      } finally {\n        this.setState({\n          isLoading: false\n        });\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: this.state.isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 33\n      }, this) : /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            md: 8,\n            children: this.state.isLoggedIn ? /*#__PURE__*/_jsxDEV(InterfacePage, {\n              isActive: this.state.isActive,\n              logOut: this.logOut,\n              users: this.state.sortedUsers,\n              deleteUser: this.deleteUser,\n              addingUser: this.state.addingUser,\n              popup: this.popup,\n              openPopup: this.state.openPopup,\n              showMessage: this.state.showMessage,\n              sendCreateAccount: this.sendCreateAccount,\n              message: this.state.message,\n              name: this.state.user\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 23\n            }, this) : /*#__PURE__*/_jsxDEV(LogInPage, {\n              hideMessage: this.hideMessage,\n              showMessage: this.state.showMessage,\n              message: this.state.message,\n              sendLogin: this.sendLogin,\n              sendCreateAccount: this.sendCreateAccount,\n              sendResetPassword: this.sendResetPassword\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/Me/Desktop/opus/client/src/components/Main.tsx"],"names":["React","Container","Row","Col","LogInPage","InterfacePage","Main","Component","constructor","props","sendData","data","url","method","response","fetch","mode","headers","requestInterceptor","credentials","body","JSON","stringify","then","res","status","console","log","Error","statusText","newData","responseInterceptor","interceptorResponse","json","token","localStorage","getItem","Headers","Authorization","refreshToken","ok","setItem","newTokens","accessToken","error","sendLogin","getAllUsers","setState","isActive","isLoggedIn","user","email","toString","showMessage","message","head","sendCreateAccount","byUser","password","repeatPassword","destination","state","openPopup","unsortedUsers","name","logs","sortedUsers","sortUsers","deleteUser","alert","popup","newUsers","find","userIndex","indexOf","splice","logOut","removeItem","sendResetPassword","hideMessage","i","length","usersOnPage","sliceableArray","slice","push","type","addingUser","isLoading","bind","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport LogInPage from './LogInPage';\nimport InterfacePage from './InterfacePage';\n\nclass Main extends React.Component<{}, {\n  usersOnPage: number,\n  isActive: boolean,\n  isLoading: boolean,\n  sortedUsers: Array<Array<{ name:string, logs:Array<string> }>>,\n  unsortedUsers: Array<{ name:string, logs:Array<string> }>,\n  isLoggedIn: boolean,\n  addingUser: boolean,\n  user:string,\n  showMessage: boolean,\n  message: { head: string, body: string },\n  openPopup: boolean }> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      isLoggedIn: false,\n      user: '',\n      showMessage: false,\n      message: { body: '', head: '' },\n      openPopup: false,\n      addingUser: false,\n      unsortedUsers: [],\n      sortedUsers: [],\n      isLoading: false,\n      isActive: false,\n      usersOnPage: 6,\n\n    };\n    this.sendData = this.sendData.bind(this);\n    this.sendLogin = this.sendLogin.bind(this);\n    this.sendCreateAccount = this.sendCreateAccount.bind(this);\n    this.sendResetPassword = this.sendResetPassword.bind(this);\n  }\n\n  async componentDidMount() {\n    const refreshToken = localStorage.getItem('refreshToken');\n    if (refreshToken) {\n      this.setState({ isLoading: true });\n      try {\n        await fetch('http://localhost:4000/refresh',\n          {\n            method: 'POST',\n            mode: 'cors',\n            headers: new Headers({\n              'Content-Type': 'application/json',\n            }),\n            body: JSON.stringify({ refreshToken }),\n          })\n          .then((response) => {\n            if (response.ok) {\n              return response.json()\n                .then(async (json) => {\n                  await this.getAllUsers(json.newTokens.accessToken);\n                  localStorage.setItem('token', json.newTokens.accessToken);\n                  localStorage.setItem('refreshToken', json.newTokens.refreshToken);\n                  this.setState({\n                    isActive: json.user.isActive, isLoggedIn: true, user: json.user.email.toString(), showMessage: false, message: { head: '', body: '' },\n                  });\n                });\n            } if (!response.ok) {\n              throw Error(response.statusText);\n            }\n          });\n      } catch (error) {\n        console.log(error);  // eslint-disable-line\n      } finally {\n        this.setState({ isLoading: false });\n      }\n    }\n  }\n\n  sendData = async (data:any, url:string, method: string) => {\n    const response: any = await fetch(`http://localhost:4000/${url}`,\n      {\n        method,\n        mode: 'cors',\n        headers: this.requestInterceptor(),\n        credentials: 'include',\n        body: JSON.stringify(data),\n      })\n      .then(async (res) => {\n        if (res.status === 401) {\n          console.log(Error(res.statusText)); // eslint-disable-line\n          const newData:any = await this.responseInterceptor(data, url, method)\n            .then((interceptorResponse) => interceptorResponse);\n          return newData;\n        }\n        return res.json().then((json: any) => json);\n      });\n    return response;\n  };\n\n  requestInterceptor = () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return new Headers({\n        'Content-Type': 'application/json',\n      });\n    }\n    return new Headers({\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    });\n  };\n\n  responseInterceptor = async (data:any, url:string, method:string) => {\n    const refreshToken = localStorage.getItem('refreshToken');\n    const token = localStorage.getItem('token');\n    try {\n      await fetch('http://localhost:4000/refresh',\n        {\n          method: 'POST',\n          mode: 'cors',\n          headers: new Headers({\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'application/json',\n          }),\n          body: JSON.stringify({ refreshToken }),\n        })\n        .then((response) => {\n          if (response.ok) {\n            return response.json()\n              .then(async (json) => {\n                localStorage.setItem('token', json.newTokens.accessToken);\n                localStorage.setItem('refreshToken', json.newTokens.refreshToken);\n              });\n          } if (!response.ok) {\n            throw Error(response.statusText);\n          }\n        });\n    } catch (error) {\n      console.log(error); // eslint-disable-line\n    }\n    const interceptorResponse = await this.sendData(data, url, method);\n    return interceptorResponse;\n  };\n\n  sendLogin = async (data: { email: string, password: string }) => {\n    const response = await this.sendData(data, 'login', 'POST');\n    if (response.status) {\n      await this.getAllUsers(response.accessToken);\n      localStorage.setItem('token', response.accessToken);\n      localStorage.setItem('refreshToken', response.refreshToken);\n      this.setState({\n        isActive: response.data.isActive,\n        isLoggedIn: true,\n        user: response.data.email.toString(),\n        showMessage: false,\n        message: { head: '', body: '' },\n      });\n    } else if (!response.status) {\n      this.setState({\n        showMessage: true,\n        message: { head: response.data.head, body: response.data.body },\n      });\n    }\n  };\n\n  sendCreateAccount = async ( data: { email: string, password: string, repeatPassword: string }, byUser?:boolean) => {  // eslint-disable-line\n    if (data.password === data.repeatPassword) {\n      const destination = (() => (byUser ? 'addUser' : 'registration'))();\n      const response = await this.sendData(data, destination, 'POST');\n      if (response.status) {\n        if (this.state.openPopup) {\n          this.setState({\n            openPopup: false,\n            unsortedUsers: [...this.state.unsortedUsers, { name: data.email, logs: [] }],\n            sortedUsers: this.sortUsers([...this.state.unsortedUsers, { name: data.email, logs: [] }]), // eslint-disable-line\n          });\n        }\n        this.setState({\n          showMessage: true,\n          message: { head: response.data.head, body: response.data.body },\n        });\n      } else if (!response.status) {\n        this.setState({\n          showMessage: true,\n          message: { head: response.data.head, body: response.data.body },\n        });\n      }\n    } else {\n      this.setState({\n        showMessage: true,\n        message: { head: 'Passwords dont match', body: 'Check that both password fields are the same.' },\n      });\n    }\n  };\n\n  deleteUser = async (name: string) => {\n    await this.sendData({ email: name }, 'delete', 'DELETE')\n      .then((response) => {\n        if (!response.status) {\n          alert('Could not delete user, please try again'); // eslint-disable-line\n        } else {\n          this.popup('delete');\n          const newUsers = this.state.unsortedUsers;\n          const user = newUsers.find((user) => (user.name === name ? user : null));\n          if (user) {\n            const userIndex = newUsers.indexOf(user);\n            newUsers.splice(userIndex, 1);\n          }\n          this.setState({\n            unsortedUsers: newUsers,\n            sortedUsers: this.sortUsers(newUsers),\n          });\n        }\n      });\n  };\n\n  getAllUsers = async (token:string) => {\n    try {\n      await fetch('http://localhost:4000/users',\n        {\n          method: 'GET',\n          mode: 'cors',\n          headers: new Headers({\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'application/json',\n          }),\n        })\n        .then((response) => {\n          if (response.ok) {\n            return response.json()\n              .then((json) => {\n                this.setState({\n                  unsortedUsers: json,\n                  sortedUsers: this.sortUsers(json),\n                });\n              });\n          } if (!response.ok) {\n            throw Error(response.statusText);\n          }\n        });\n    } catch (error) {\n      console.log(error);  // eslint-disable-line\n    }\n  };\n\n  logOut = async () => {\n    const refreshToken = localStorage.getItem('refreshToken');\n    await this.sendData({ refreshToken }, 'logout', 'POST');\n    localStorage.removeItem('token');\n    localStorage.removeItem('refreshToken');\n    this.setState({ isLoggedIn: false, showMessage: false, message: { head: '', body: '' } });\n  };\n\n  sendResetPassword = async (data: { email: string }) => {\n    const response = await this.sendData(data, 'restore', 'POST');\n    this.setState({\n      showMessage: true,\n      message: { head: response.data.head, body: response.data.body },\n    });\n  };\n\n  hideMessage = () => {\n    this.setState({\n      showMessage: false,\n    });\n  };\n\n  sortUsers = (data: Array<{ name:string, logs:Array<string> }>) => {\n    const newUsers: Array<Array<{ name:string, logs:Array<string> }>> = [];\n    for (let i = 0; i < data.length; i += 1) {\n      const { usersOnPage } = this.state;\n      const sliceableArray = data.slice(i * usersOnPage, usersOnPage * (i + 1));\n      if (sliceableArray.length > 0) { newUsers.push(sliceableArray); }\n    }\n    return newUsers;\n  };\n\n  popup = (type: string) => {\n    if (type === 'add') {\n      this.setState({\n        openPopup: !this.state.openPopup,\n        addingUser: true,\n        showMessage: false,\n        message: { head: '', body: '' },\n      });\n    } else {\n      this.setState({\n        openPopup: !this.state.openPopup,\n        addingUser: false,\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.isLoading ? <p>Loading...</p>\n          : (\n            <Container>\n              <Row>\n                <Col />\n                <Col md={8}>\n                  {this.state.isLoggedIn\n                    ? (\n                      <InterfacePage\n                        isActive={this.state.isActive}\n                        logOut={this.logOut}\n                        users={this.state.sortedUsers}\n                        deleteUser={this.deleteUser}\n                        addingUser={this.state.addingUser}\n                        popup={this.popup}\n                        openPopup={this.state.openPopup}\n                        showMessage={this.state.showMessage}\n                        sendCreateAccount={this.sendCreateAccount}\n                        message={this.state.message}\n                        name={this.state.user}\n                      />\n                    )\n                    : (\n                      <LogInPage\n                        hideMessage={this.hideMessage}\n                        showMessage={this.state.showMessage}\n                        message={this.state.message}\n                        sendLogin={this.sendLogin}\n                        sendCreateAccount={this.sendCreateAccount}\n                        sendResetPassword={this.sendResetPassword}\n                      />\n                    )}\n                </Col>\n                <Col />\n              </Row>\n            </Container>\n          )}\n      </div>\n    );\n  }\n}\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}