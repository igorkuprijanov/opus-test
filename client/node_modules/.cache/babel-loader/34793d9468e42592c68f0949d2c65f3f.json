{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Me\\\\Desktop\\\\opus\\\\client\\\\src\\\\components\\\\Main.tsx\";\nimport React from 'react';\nimport LogInPage from './LogInPage';\nimport InterfacePage from './InterfacePage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sendData = async (data, url, method) => {\n      const response = await fetch(`http://localhost:4000/${url}`, {\n        method: method,\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }).then(response => {\n        if (response.ok) {\n          return response.json().then(json => {\n            return json;\n          });\n        } else if (!response.ok) {\n          console.log(Error(response.statusText));\n        }\n      });\n      return response;\n    };\n\n    this.sendLogin = async data => {\n      const response = await this.sendData(data, 'login', 'POST');\n\n      if (response.status) {\n        this.setState({\n          isLoggedIn: true,\n          user: data.email.toString(),\n          showMessage: false,\n          message: {\n            head: '',\n            body: ''\n          }\n        });\n      } else {\n        this.setState({\n          showMessage: true,\n          message: {\n            head: response.message.head,\n            body: response.message.body\n          }\n        });\n      }\n    };\n\n    this.sendCreateAccount = async data => {\n      if (data.password === data.repeatPassword) {\n        const response = await this.sendData(data, 'create', 'POST');\n\n        if (response.status) {\n          if (this.state.openPopup) {\n            this.setState({\n              openPopup: false,\n              interfaceKey: this.state.interfaceKey\n            }); //send new userdata to interface component\n          }\n\n          this.setState({\n            showMessage: true,\n            message: {\n              head: response.message.head,\n              body: response.message.body\n            }\n          });\n        } else if (!response.status) {\n          this.setState({\n            showMessage: true,\n            message: {\n              head: response.message.head,\n              body: response.message.body\n            }\n          });\n        }\n      } else {\n        this.setState({\n          showMessage: true,\n          message: {\n            head: 'Passwords dont match',\n            body: 'Check that both password fields are the same.'\n          }\n        });\n      }\n    };\n\n    this.sendResetPassword = async data => {\n      const response = await this.sendData(data, 'restore', 'POST');\n      this.setState({\n        showMessage: true,\n        message: {\n          head: response.message.head,\n          body: response.message.body\n        }\n      });\n    };\n\n    this.hideMessage = () => {\n      this.setState({\n        showMessage: false\n      });\n    };\n\n    this.popup = type => {\n      if (type === 'add') {\n        this.setState({\n          openPopup: !this.state.openPopup,\n          addingUser: true\n        });\n      } else {\n        this.setState({\n          openPopup: !this.state.openPopup,\n          addingUser: false\n        });\n      }\n    };\n\n    this.deleteUser = async name => {\n      await this.sendData({\n        name\n      }, 'delete', 'DELETE').then(response => {\n        if (!response.status) {\n          alert('Could not delete user, please try again');\n        } else {\n          this.popup('delete');\n        }\n      });\n    };\n\n    this.state = {\n      isLoggedIn: false,\n      user: '',\n      showMessage: false,\n      message: {\n        body: '',\n        head: ''\n      },\n      openPopup: false,\n      addingUser: false,\n      interfaceKey: 0\n    };\n    this.sendData = this.sendData.bind(this);\n    this.sendLogin = this.sendLogin.bind(this);\n    this.sendCreateAccount = this.sendCreateAccount.bind(this);\n    this.sendResetPassword = this.sendResetPassword.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: this.state.isLoggedIn ? /*#__PURE__*/_jsxDEV(InterfacePage, {\n        deleteUser: this.deleteUser,\n        addingUser: this.state.addingUser,\n        popup: this.popup,\n        openPopup: this.state.openPopup,\n        showMessage: this.state.showMessage,\n        sendCreateAccount: this.sendCreateAccount,\n        message: this.state.message,\n        name: this.state.user\n      }, this.state.interfaceKey, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 34\n      }, this) : /*#__PURE__*/_jsxDEV(LogInPage, {\n        hideMessage: this.hideMessage,\n        showMessage: this.state.showMessage,\n        message: this.state.message,\n        sendLogin: this.sendLogin,\n        sendCreateAccount: this.sendCreateAccount,\n        sendResetPassword: this.sendResetPassword\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 331\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/Me/Desktop/opus/client/src/components/Main.tsx"],"names":["React","LogInPage","InterfacePage","Main","Component","constructor","props","sendData","data","url","method","response","fetch","mode","headers","body","JSON","stringify","then","ok","json","console","log","Error","statusText","sendLogin","status","setState","isLoggedIn","user","email","toString","showMessage","message","head","sendCreateAccount","password","repeatPassword","state","openPopup","interfaceKey","sendResetPassword","hideMessage","popup","type","addingUser","deleteUser","name","alert","bind","render"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport LogInPage from './LogInPage'\r\nimport InterfacePage from './InterfacePage'\r\n\r\nclass Main extends React.Component<{}, {interfaceKey: number, isLoggedIn: boolean, addingUser: boolean, user:string, showMessage: boolean, message: {head: string, body: string}, openPopup: boolean}>{\r\n\r\n  constructor(props: any){\r\n    super(props)\r\n    this.state = {\r\n      isLoggedIn: false,\r\n      user: '',\r\n      showMessage: false,\r\n      message: {body: '', head: ''},\r\n      openPopup: false,\r\n      addingUser: false,\r\n      interfaceKey: 0\r\n\r\n    }\r\n    this.sendData = this.sendData.bind(this)\r\n    this.sendLogin = this.sendLogin.bind(this)\r\n    this.sendCreateAccount = this.sendCreateAccount.bind(this)\r\n    this.sendResetPassword = this.sendResetPassword.bind(this)\r\n  }\r\n\r\n  sendData = async (data:any, url:string, method: string) => {\r\n          const response =  await fetch(`http://localhost:4000/${url}`,\r\n          {\r\n            method: method,\r\n            mode: 'cors',\r\n            headers:{'Content-Type' : 'application/json'},\r\n            body: JSON.stringify(data)\r\n          })\r\n          .then(response => {\r\n            if(response.ok){\r\n                return response.json().then(json =>{\r\n                return json\r\n              })\r\n            }else if(!response.ok){\r\n              console.log(Error(response.statusText))\r\n            }\r\n          })\r\n          return response\r\n\r\n\r\n  }\r\n\r\n  sendLogin = async (data: {email: string, password: string}) =>{\r\n    const response = await this.sendData(data, 'login', 'POST')\r\n    if(response.status){\r\n      this.setState({isLoggedIn: true, user: data.email.toString(), showMessage: false, message: {head: '', body: ''}})\r\n    }else{\r\n      this.setState({\r\n        showMessage: true,\r\n        message: {head: response.message.head, body: response.message.body}\r\n      })\r\n    }\r\n  }\r\n\r\n  sendCreateAccount = async (data: {email: string, password: string, repeatPassword: string}) =>{\r\n    if(data.password === data.repeatPassword){\r\n        const response = await this.sendData(data, 'create', 'POST')\r\n        if(response.status){\r\n          if(this.state.openPopup){\r\n            \r\n            this.setState({openPopup: false, interfaceKey: this.state.interfaceKey})\r\n            //send new userdata to interface component\r\n          }\r\n          this.setState({\r\n            showMessage: true,\r\n            message: {head: response.message.head, body:response.message.body}\r\n          })\r\n        }else if(!response.status){\r\n          this.setState({\r\n            showMessage: true,\r\n            message: {head: response.message.head, body:response.message.body}\r\n          })\r\n        }\r\n    }else{\r\n      this.setState({\r\n        showMessage: true,\r\n        message: {head: 'Passwords dont match', body: 'Check that both password fields are the same.'}\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  sendResetPassword = async(data: {email: string}) =>{\r\n    const response = await this.sendData(data, 'restore', 'POST')\r\n    this.setState({\r\n      showMessage: true,\r\n      message: {head: response.message.head, body:response.message.body}\r\n    })\r\n  }\r\n\r\n  hideMessage = () =>{\r\n    this.setState({\r\n      showMessage: false\r\n    })\r\n  }\r\n\r\n  popup = (type: string) =>{\r\n    if(type === 'add'){\r\n      this.setState({\r\n        openPopup: !this.state.openPopup,\r\n        addingUser: true\r\n      })\r\n    }else{\r\n      this.setState({\r\n        openPopup: !this.state.openPopup,\r\n        addingUser: false\r\n      })\r\n    }\r\n  }\r\n\r\n  deleteUser = async (name: string) =>{\r\n    await this.sendData({name}, 'delete', 'DELETE')\r\n    .then(response => {if(!response.status){\r\n      alert('Could not delete user, please try again')\r\n    }else{\r\n      this.popup('delete')\r\n    }})\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        {this.state.isLoggedIn ? <InterfacePage key={this.state.interfaceKey} deleteUser={this.deleteUser} addingUser={this.state.addingUser} popup={this.popup} openPopup={this.state.openPopup} showMessage={this.state.showMessage} sendCreateAccount={this.sendCreateAccount} message={this.state.message} name={this.state.user}/> : <LogInPage hideMessage={this.hideMessage} showMessage={this.state.showMessage} message={this.state.message} sendLogin={this.sendLogin} sendCreateAccount={this.sendCreateAccount} sendResetPassword={this.sendResetPassword}/>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main\r\n"]},"metadata":{},"sourceType":"module"}