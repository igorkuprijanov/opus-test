{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Me\\\\Desktop\\\\opus\\\\client\\\\src\\\\components\\\\Main.tsx\";\nimport React from 'react';\nimport LogInPage from './LogInPage';\nimport InterfacePage from './InterfacePage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sendData = async (data, url) => {\n      const response = await fetch(`http://localhost:4000/${url}`, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }).then(response => {\n        if (response.ok) {\n          return response.json().then(json => {\n            return json;\n          });\n        } else if (!response.ok) {\n          console.log(Error(response.statusText));\n        }\n      });\n      return response;\n    };\n\n    this.sendLogin = async data => {\n      const response = await this.sendData(data, 'login');\n\n      if (response.status) {\n        this.setState({\n          isLoggedIn: true,\n          user: data.email.toString(),\n          showMessage: false,\n          message: {\n            head: '',\n            body: ''\n          }\n        });\n      } else {\n        this.setState({\n          showMessage: true,\n          message: {\n            head: response.message.head,\n            body: response.message.body\n          }\n        });\n      }\n    };\n\n    this.sendCreateAccount = async data => {\n      if (data.password === data.repeatPassword) {\n        const response = await this.sendData(data, 'create');\n\n        if (response.status) {\n          if (this.state.openPopup) {\n            this.setState({\n              openPopup: false\n            });\n          }\n\n          this.setState({\n            showMessage: true,\n            message: {\n              head: response.message.head,\n              body: response.message.body\n            }\n          });\n        } else if (!response.status) {\n          this.setState({\n            showMessage: true,\n            message: {\n              head: response.message.head,\n              body: response.message.body\n            }\n          });\n        }\n      } else {\n        this.setState({\n          showMessage: true,\n          message: {\n            head: 'Passwords dont match',\n            body: 'Check that both password fields are the same.'\n          }\n        });\n      }\n    };\n\n    this.sendResetPassword = async data => {\n      const response = await this.sendData(data, 'restore');\n      this.setState({\n        showMessage: true,\n        message: {\n          head: response.message.head,\n          body: response.message.body\n        }\n      });\n    };\n\n    this.hideMessage = () => {\n      this.setState({\n        showMessage: false\n      });\n    };\n\n    this.popup = () => {\n      this.setState({\n        openPopup: !this.state.openPopup\n      });\n    };\n\n    this.state = {\n      isLoggedIn: false,\n      user: '',\n      showMessage: false,\n      message: {\n        body: '',\n        head: ''\n      },\n      openPopup: false,\n      addingUser: false,\n      deletingUser: false\n    };\n    this.sendData = this.sendData.bind(this);\n    this.sendLogin = this.sendLogin.bind(this);\n    this.sendCreateAccount = this.sendCreateAccount.bind(this);\n    this.sendResetPassword = this.sendResetPassword.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: this.state.isLoggedIn ? /*#__PURE__*/_jsxDEV(InterfacePage, {\n        addingUser: this.state.addingUser,\n        popup: this.popup,\n        openPopup: this.state.openPopup,\n        showMessage: this.state.showMessage,\n        sendCreateAccount: this.sendCreateAccount,\n        message: this.state.message,\n        name: this.state.user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 34\n      }, this) : /*#__PURE__*/_jsxDEV(LogInPage, {\n        hideMessage: this.hideMessage,\n        showMessage: this.state.showMessage,\n        message: this.state.message,\n        sendLogin: this.sendLogin,\n        sendCreateAccount: this.sendCreateAccount,\n        sendResetPassword: this.sendResetPassword,\n        sendData: this.sendData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 272\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/Me/Desktop/opus/client/src/components/Main.tsx"],"names":["React","LogInPage","InterfacePage","Main","Component","constructor","props","sendData","data","url","response","fetch","method","mode","headers","body","JSON","stringify","then","ok","json","console","log","Error","statusText","sendLogin","status","setState","isLoggedIn","user","email","toString","showMessage","message","head","sendCreateAccount","password","repeatPassword","state","openPopup","sendResetPassword","hideMessage","popup","addingUser","deletingUser","bind","render"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport LogInPage from './LogInPage'\r\nimport InterfacePage from './InterfacePage'\r\n\r\nclass Main extends React.Component<{}, {isLoggedIn: boolean, addingUser: boolean, deletingUser: boolean, user:string, showMessage: boolean, message: {head: string, body: string}, openPopup: boolean}>{\r\n\r\n  constructor(props: any){\r\n    super(props)\r\n    this.state = {\r\n      isLoggedIn: false,\r\n      user: '',\r\n      showMessage: false,\r\n      message: {body: '', head: ''},\r\n      openPopup: false,\r\n      addingUser: false,\r\n      deletingUser: false\r\n\r\n    }\r\n    this.sendData = this.sendData.bind(this)\r\n    this.sendLogin = this.sendLogin.bind(this)\r\n    this.sendCreateAccount = this.sendCreateAccount.bind(this)\r\n    this.sendResetPassword = this.sendResetPassword.bind(this)\r\n  }\r\n\r\n  sendData = async (data:any, url:string) => {\r\n          const response =  await fetch(`http://localhost:4000/${url}`,\r\n          {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            headers:{'Content-Type' : 'application/json'},\r\n            body: JSON.stringify(data)\r\n          })\r\n          .then(response => {\r\n            if(response.ok){\r\n                return response.json().then(json =>{\r\n                return json\r\n              })\r\n            }else if(!response.ok){\r\n              console.log(Error(response.statusText))\r\n            }\r\n          })\r\n          return response\r\n\r\n\r\n  }\r\n\r\n  sendLogin = async (data: {email: string, password: string}) =>{\r\n    const response = await this.sendData(data, 'login')\r\n    if(response.status){\r\n      this.setState({isLoggedIn: true, user: data.email.toString(), showMessage: false, message: {head: '', body: ''}})\r\n    }else{\r\n      this.setState({\r\n        showMessage: true,\r\n        message: {head: response.message.head, body: response.message.body}\r\n      })\r\n    }\r\n  }\r\n\r\n  sendCreateAccount = async (data: {email: string, password: string, repeatPassword: string}) =>{\r\n    if(data.password === data.repeatPassword){\r\n        const response = await this.sendData(data, 'create')\r\n        if(response.status){\r\n          if(this.state.openPopup){\r\n            this.setState({openPopup: false})\r\n          }\r\n          this.setState({\r\n            showMessage: true,\r\n            message: {head: response.message.head, body:response.message.body}\r\n          })\r\n        }else if(!response.status){\r\n          this.setState({\r\n            showMessage: true,\r\n            message: {head: response.message.head, body:response.message.body}\r\n          })\r\n        }\r\n    }else{\r\n      this.setState({\r\n        showMessage: true,\r\n        message: {head: 'Passwords dont match', body: 'Check that both password fields are the same.'}\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  sendResetPassword = async(data: {email: string}) =>{\r\n    const response = await this.sendData(data, 'restore')\r\n    this.setState({\r\n      showMessage: true,\r\n      message: {head: response.message.head, body:response.message.body}\r\n    })\r\n  }\r\n\r\n  hideMessage = () =>{\r\n    this.setState({\r\n      showMessage: false\r\n    })\r\n  }\r\n\r\n  popup = () =>{\r\n    this.setState({\r\n      openPopup: !this.state.openPopup\r\n    })\r\n  }\r\n\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        {this.state.isLoggedIn ? <InterfacePage addingUser={this.state.addingUser} popup={this.popup} openPopup={this.state.openPopup} showMessage={this.state.showMessage} sendCreateAccount={this.sendCreateAccount} message={this.state.message} name={this.state.user}/> : <LogInPage hideMessage={this.hideMessage} showMessage={this.state.showMessage} message={this.state.message} sendLogin={this.sendLogin} sendCreateAccount={this.sendCreateAccount} sendResetPassword={this.sendResetPassword} sendData={this.sendData}/>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main\r\n"]},"metadata":{},"sourceType":"module"}