{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Me\\\\Desktop\\\\opus\\\\client\\\\src\\\\components\\\\Main.tsx\";\nimport React from 'react';\nimport LogInPage from './LogInPage';\nimport InterfacePage from './InterfacePage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sendData = async (data, url, method) => {\n      const response = await fetch(`http://localhost:4000/${url}`, {\n        method: method,\n        mode: 'cors',\n        headers: this.requestInterceptor(),\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }).then(async response => {\n        console.log(response);\n\n        if (!response.ok) {\n          console.log(Error(response.statusText));\n\n          if (response.status === 401) {\n            console.log('go to response interceptor');\n            await this.responseInterceptor().then(() => {\n              this.sendData(data, url, method);\n            });\n          }\n        }\n\n        return response.json().then(json => {\n          console.log(json);\n          console.log(`this is what we return from send data function ${json}`);\n          return json;\n        });\n      });\n      return response;\n    };\n\n    this.requestInterceptor = () => {\n      let token = localStorage.getItem('token');\n\n      if (!token) {\n        return new Headers({\n          'Content-Type': 'application/json'\n        });\n      }\n\n      return new Headers({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      });\n    };\n\n    this.responseInterceptor = async () => {\n      let refreshToken = localStorage.getItem('refreshToken');\n      let token = localStorage.getItem('token');\n      console.log('try to refresh tokens and repeat request');\n\n      try {\n        await fetch(`http://localhost:4000/refresh`, {\n          method: 'POST',\n          mode: 'cors',\n          headers: new Headers({\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }),\n          body: JSON.stringify({\n            refreshToken\n          })\n        }).then(response => {\n          if (response.ok) {\n            return response.json().then(async json => {\n              console.log(json);\n              localStorage.setItem('token', json.newTokens.accessToken);\n              localStorage.setItem('refreshToken', json.newTokens.refreshToken);\n              return;\n            });\n          } else if (!response.ok) {\n            throw Error(response.statusText);\n          }\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.sendLogin = async data => {\n      const response = await this.sendData(data, 'login', 'POST');\n\n      if (response.status) {\n        await this.getAllUsers(response.accessToken);\n        localStorage.setItem('token', response.accessToken);\n        localStorage.setItem('refreshToken', response.refreshToken);\n        this.setState({\n          isActive: response.data.isActive,\n          isLoggedIn: true,\n          user: response.data.email.toString(),\n          showMessage: false,\n          message: {\n            head: '',\n            body: ''\n          }\n        });\n      } else if (!response.status) {\n        this.setState({\n          showMessage: true,\n          message: {\n            head: response.data.head,\n            body: response.data.body\n          }\n        });\n      }\n    };\n\n    this.sendCreateAccount = async data => {\n      if (data.password === data.repeatPassword) {\n        const response = await this.sendData(data, 'registration', 'POST');\n\n        if (response.status) {\n          if (this.state.openPopup) {\n            this.setState({\n              openPopup: false,\n              unsortedUsers: [...this.state.unsortedUsers, {\n                name: data.email,\n                logs: []\n              }],\n              sortedUsers: this.sortUsers([...this.state.unsortedUsers, {\n                name: data.email,\n                logs: []\n              }])\n            });\n          }\n\n          this.setState({\n            showMessage: true,\n            message: {\n              head: response.data.head,\n              body: response.data.body\n            }\n          });\n        } else if (!response.status) {\n          this.setState({\n            showMessage: true,\n            message: {\n              head: response.data.head,\n              body: response.data.body\n            }\n          });\n        }\n      } else {\n        this.setState({\n          showMessage: true,\n          message: {\n            head: 'Passwords dont match',\n            body: 'Check that both password fields are the same.'\n          }\n        });\n      }\n    };\n\n    this.deleteUser = async name => {\n      console.log('delete user function');\n      await this.sendData({\n        \"email\": name\n      }, 'delete', 'DELETE').then(response => {\n        if (!response.status) {\n          console.log('Could not delete user, please try again');\n        } else {\n          console.log('user go deleted nicely');\n          this.popup('delete');\n          let newUsers = this.state.unsortedUsers;\n          console.log(newUsers);\n          let user = newUsers.find(user => {\n            return user.name === name ? user : null;\n          });\n\n          if (user) {\n            let userIndex = newUsers.indexOf(user);\n            console.log(userIndex);\n            newUsers.splice(userIndex, 1);\n          }\n\n          this.setState({\n            unsortedUsers: newUsers,\n            sortedUsers: this.sortUsers(newUsers)\n          });\n        }\n      });\n    };\n\n    this.getAllUsers = async token => {\n      try {\n        await fetch(`http://localhost:4000/users`, {\n          method: 'GET',\n          mode: 'cors',\n          headers: new Headers({\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          })\n        }).then(response => {\n          if (response.ok) {\n            return response.json().then(json => {\n              console.log(json);\n              this.setState({\n                unsortedUsers: json,\n                sortedUsers: this.sortUsers(json)\n              });\n            });\n          } else if (!response.ok) {\n            throw Error(response.statusText);\n          }\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.logOut = async () => {\n      let refreshToken = localStorage.getItem('refreshToken');\n      await this.sendData({\n        refreshToken\n      }, 'logout', 'POST');\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n      this.setState({\n        isLoggedIn: false,\n        showMessage: false,\n        message: {\n          head: '',\n          body: ''\n        }\n      });\n    };\n\n    this.sendResetPassword = async data => {\n      const response = await this.sendData(data, 'restore', 'POST');\n      this.setState({\n        showMessage: true,\n        message: {\n          head: response.data.head,\n          body: response.data.body\n        }\n      });\n    };\n\n    this.hideMessage = () => {\n      this.setState({\n        showMessage: false\n      });\n    };\n\n    this.sortUsers = data => {\n      let newUsers = [];\n\n      for (let i = 0; i < data.length; i++) {\n        let sliceableArray = data.slice(i * this.state.usersOnPage, this.state.usersOnPage * (i + 1));\n        if (sliceableArray.length > 0) newUsers.push(sliceableArray);\n      }\n\n      return newUsers;\n    };\n\n    this.popup = type => {\n      if (type === 'add') {\n        this.setState({\n          openPopup: !this.state.openPopup,\n          addingUser: true\n        });\n      } else {\n        this.setState({\n          openPopup: !this.state.openPopup,\n          addingUser: false\n        });\n      }\n    };\n\n    this.state = {\n      isLoggedIn: false,\n      user: '',\n      showMessage: false,\n      message: {\n        body: '',\n        head: ''\n      },\n      openPopup: false,\n      addingUser: false,\n      unsortedUsers: [],\n      sortedUsers: [],\n      isLoading: false,\n      isActive: false,\n      usersOnPage: 6\n    };\n    this.sendData = this.sendData.bind(this);\n    this.sendLogin = this.sendLogin.bind(this);\n    this.sendCreateAccount = this.sendCreateAccount.bind(this);\n    this.sendResetPassword = this.sendResetPassword.bind(this);\n  }\n\n  async componentDidMount() {\n    console.log('component mounted');\n    let refreshToken = localStorage.getItem('refreshToken'); //let token = localStorage.getItem('token')\n\n    if (refreshToken) {\n      this.setState({\n        isLoading: true\n      });\n\n      try {\n        await fetch(`http://localhost:4000/refresh`, {\n          method: 'POST',\n          mode: 'cors',\n          headers: new Headers({\n            //'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }),\n          body: JSON.stringify({\n            refreshToken\n          })\n        }).then(response => {\n          if (response.ok) {\n            return response.json().then(async json => {\n              console.log(json);\n              await this.getAllUsers(json.newTokens.accessToken);\n              localStorage.setItem('token', json.newTokens.accessToken);\n              localStorage.setItem('refreshToken', json.newTokens.refreshToken);\n              this.setState({\n                isActive: json.user.isActive,\n                isLoggedIn: true,\n                user: json.user.email.toString(),\n                showMessage: false,\n                message: {\n                  head: '',\n                  body: ''\n                }\n              });\n            });\n          } else if (!response.ok) {\n            throw Error(response.statusText);\n          }\n        });\n      } catch (error) {\n        console.log(error);\n      } finally {\n        this.setState({\n          isLoading: false\n        });\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: this.state.isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 31\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.isLoggedIn ? /*#__PURE__*/_jsxDEV(InterfacePage, {\n          isActive: this.state.isActive,\n          logOut: this.logOut,\n          users: this.state.sortedUsers,\n          deleteUser: this.deleteUser,\n          addingUser: this.state.addingUser,\n          popup: this.popup,\n          openPopup: this.state.openPopup,\n          showMessage: this.state.showMessage,\n          sendCreateAccount: this.sendCreateAccount,\n          message: this.state.message,\n          name: this.state.user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 34\n        }, this) : /*#__PURE__*/_jsxDEV(LogInPage, {\n          hideMessage: this.hideMessage,\n          showMessage: this.state.showMessage,\n          message: this.state.message,\n          sendLogin: this.sendLogin,\n          sendCreateAccount: this.sendCreateAccount,\n          sendResetPassword: this.sendResetPassword\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 385\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/Me/Desktop/opus/client/src/components/Main.tsx"],"names":["React","LogInPage","InterfacePage","Main","Component","constructor","props","sendData","data","url","method","response","fetch","mode","headers","requestInterceptor","credentials","body","JSON","stringify","then","console","log","ok","Error","statusText","status","responseInterceptor","json","token","localStorage","getItem","Headers","refreshToken","setItem","newTokens","accessToken","error","sendLogin","getAllUsers","setState","isActive","isLoggedIn","user","email","toString","showMessage","message","head","sendCreateAccount","password","repeatPassword","state","openPopup","unsortedUsers","name","logs","sortedUsers","sortUsers","deleteUser","popup","newUsers","find","userIndex","indexOf","splice","logOut","removeItem","sendResetPassword","hideMessage","i","length","sliceableArray","slice","usersOnPage","push","type","addingUser","isLoading","bind","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport LogInPage from './LogInPage'\r\nimport InterfacePage from './InterfacePage'\r\n\r\nclass Main extends React.Component<{}, {usersOnPage: number, isActive: boolean, isLoading: boolean, sortedUsers: Array<Array<{name:string, logs:Array<string>}>>, unsortedUsers: Array<{name:string, logs:Array<string>}>, isLoggedIn: boolean, addingUser: boolean, user:string, showMessage: boolean, message: {head: string, body: string}, openPopup: boolean}>{\r\n\r\n  constructor(props: any){\r\n    super(props)\r\n    this.state = {\r\n      isLoggedIn: false,\r\n      user: '',\r\n      showMessage: false,\r\n      message: {body: '', head: ''},\r\n      openPopup: false,\r\n      addingUser: false,\r\n      unsortedUsers: [],\r\n      sortedUsers: [],\r\n      isLoading: false,\r\n      isActive: false,\r\n      usersOnPage: 6\r\n\r\n    }\r\n    this.sendData = this.sendData.bind(this)\r\n    this.sendLogin = this.sendLogin.bind(this)\r\n    this.sendCreateAccount = this.sendCreateAccount.bind(this)\r\n    this.sendResetPassword = this.sendResetPassword.bind(this)\r\n  }\r\n\r\n  sendData = async (data:any, url:string, method: string) => {\r\n          const response =  await fetch(`http://localhost:4000/${url}`,\r\n          {\r\n            method: method,\r\n            mode: 'cors',\r\n            headers: this.requestInterceptor(),\r\n            credentials: 'include',\r\n            body: JSON.stringify(data)\r\n          })\r\n          .then(async response => {\r\n              console.log(response)\r\n            if(!response.ok){\r\n              console.log(Error(response.statusText))\r\n              if(response.status === 401){\r\n                console.log('go to response interceptor')\r\n                await this.responseInterceptor().then(()=>{this.sendData(data, url, method)})\r\n\r\n              }\r\n            }\r\n                return response.json().then(json =>{\r\n                  console.log(json)\r\n                  console.log(`this is what we return from send data function ${json}`)\r\n                return json\r\n              })\r\n          })\r\n          return response\r\n\r\n\r\n  }\r\n\r\n  requestInterceptor = () =>{\r\n    let token = localStorage.getItem('token')\r\n    if(!token){\r\n      return new Headers({\r\n        'Content-Type' : 'application/json'\r\n      })\r\n    }\r\n    return new Headers({\r\n      'Authorization': `Bearer ${token}`,\r\n      'Content-Type' : 'application/json'\r\n    })\r\n  }\r\n\r\n    responseInterceptor = async () =>{\r\n    let refreshToken = localStorage.getItem('refreshToken')\r\n    let token = localStorage.getItem('token')\r\n    console.log('try to refresh tokens and repeat request')\r\n    try{\r\n    await fetch(`http://localhost:4000/refresh`,\r\n    {\r\n      method: 'POST',\r\n      mode: 'cors',\r\n      headers: new Headers({\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type' : 'application/json'\r\n      }),\r\n      body: JSON.stringify({refreshToken})\r\n    })\r\n    .then(response => {\r\n      if(response.ok){\r\n          return response.json()\r\n          .then( async json =>{\r\n            console.log(json)\r\n            localStorage.setItem('token', json.newTokens.accessToken)\r\n            localStorage.setItem('refreshToken', json.newTokens.refreshToken)\r\n            return\r\n              })\r\n      }else if(!response.ok){\r\n        throw Error(response.statusText)\r\n      }\r\n    })\r\n  }catch (error){\r\n    console.log(error)\r\n  }\r\n\r\n  }\r\n\r\n  sendLogin = async (data: {email: string, password: string}) =>{\r\n    const response = await this.sendData(data, 'login', 'POST')\r\n    if(response.status){\r\n      await this.getAllUsers(response.accessToken)\r\n      localStorage.setItem('token', response.accessToken)\r\n      localStorage.setItem('refreshToken', response.refreshToken)\r\n      this.setState({isActive: response.data.isActive, isLoggedIn: true, user: response.data.email.toString(), showMessage: false, message: {head: '', body: ''}})\r\n    }else if(!response.status){\r\n      this.setState({\r\n        showMessage: true,\r\n        message: {head: response.data.head, body: response.data.body}\r\n      })\r\n    }\r\n  }\r\n\r\n  sendCreateAccount = async (data: {email: string, password: string, repeatPassword: string}) =>{\r\n    if(data.password === data.repeatPassword){\r\n        const response = await this.sendData(data, 'registration', 'POST')\r\n        if(response.status){\r\n          if(this.state.openPopup){\r\n            this.setState({\r\n              openPopup: false,\r\n              unsortedUsers: [...this.state.unsortedUsers, {name: data.email, logs:[]}],\r\n              sortedUsers: this.sortUsers([...this.state.unsortedUsers, {name: data.email, logs: []}])\r\n            })\r\n          }\r\n          this.setState({\r\n            showMessage: true,\r\n            message: {head: response.data.head, body:response.data.body}\r\n          })\r\n        }else if(!response.status){\r\n          this.setState({\r\n            showMessage: true,\r\n            message: {head: response.data.head, body:response.data.body}\r\n          })\r\n        }\r\n    }else{\r\n      this.setState({\r\n        showMessage: true,\r\n        message: {head: 'Passwords dont match', body: 'Check that both password fields are the same.'}\r\n      })\r\n    }\r\n  }\r\n\r\n  deleteUser = async (name: string) =>{\r\n    console.log('delete user function')\r\n    await this.sendData({\"email\":name}, 'delete', 'DELETE')\r\n    .then(response => {if(!response.status){\r\n      console.log('Could not delete user, please try again')\r\n    }else{\r\n      console.log('user go deleted nicely')\r\n      this.popup('delete')\r\n      let newUsers = this.state.unsortedUsers\r\n      console.log(newUsers)\r\n      let user = newUsers.find((user)=>{return user.name === name ? user: null})\r\n      if(user){\r\n      let userIndex = newUsers.indexOf(user)\r\n      console.log(userIndex)\r\n      newUsers.splice(userIndex, 1)\r\n      }\r\n      this.setState({\r\n        unsortedUsers: newUsers,\r\n        sortedUsers: this.sortUsers(newUsers)\r\n      })\r\n\r\n    }})\r\n  }\r\n\r\n  getAllUsers = async(token:string) =>{\r\n    try{\r\n    await fetch(`http://localhost:4000/users`,\r\n    {\r\n      method: 'GET',\r\n      mode: 'cors',\r\n      headers: new Headers({\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type' : 'application/json'\r\n      }),\r\n    })\r\n    .then(response => {\r\n      if(response.ok){\r\n          return response.json()\r\n          .then(json =>{\r\n            console.log(json)\r\n          this.setState({\r\n            unsortedUsers: json,\r\n            sortedUsers: this.sortUsers(json)\r\n          })\r\n        })\r\n      }else if(!response.ok){\r\n        throw Error(response.statusText)\r\n      }\r\n    })\r\n  }catch (error){\r\n    console.log(error)\r\n  }\r\n  }\r\n\r\n  logOut = async () =>{\r\n    let refreshToken = localStorage.getItem('refreshToken')\r\n    await this.sendData({refreshToken}, 'logout', 'POST')\r\n    localStorage.removeItem('token')\r\n    localStorage.removeItem('refreshToken')\r\n    this.setState({isLoggedIn: false, showMessage: false, message: {head:'', body:''}})\r\n  }\r\n\r\n\r\n  sendResetPassword = async(data: {email: string}) =>{\r\n    const response = await this.sendData(data, 'restore', 'POST')\r\n    this.setState({\r\n      showMessage: true,\r\n      message: {head: response.data.head, body:response.data.body}\r\n    })\r\n  }\r\n\r\n  hideMessage = () =>{\r\n    this.setState({\r\n      showMessage: false\r\n    })\r\n  }\r\n\r\n  sortUsers = (data: Array<{name:string, logs:Array<string>}>) =>{\r\n    let newUsers: Array<Array<{name:string, logs:Array<string>}>> = []\r\n    for(let i =0; i<data.length; i++){\r\n      let sliceableArray = data.slice(i*this.state.usersOnPage, this.state.usersOnPage*(i+1))\r\n      if(sliceableArray.length > 0)\r\n        newUsers.push(sliceableArray)\r\n      }\r\n    return newUsers\r\n  }\r\n\r\n  popup = (type: string) =>{\r\n    if(type === 'add'){\r\n      this.setState({\r\n        openPopup: !this.state.openPopup,\r\n        addingUser: true\r\n      })\r\n    }else{\r\n      this.setState({\r\n        openPopup: !this.state.openPopup,\r\n        addingUser: false\r\n      })\r\n    }\r\n  }\r\n\r\n  async componentDidMount(){\r\n    console.log('component mounted')\r\n    let refreshToken = localStorage.getItem('refreshToken')\r\n    //let token = localStorage.getItem('token')\r\n    if(refreshToken){\r\n      this.setState({isLoading: true})\r\n      try{\r\n      await fetch(`http://localhost:4000/refresh`,\r\n      {\r\n        method: 'POST',\r\n        mode: 'cors',\r\n        headers: new Headers({\r\n          //'Authorization': `Bearer ${token}`,\r\n          'Content-Type' : 'application/json'\r\n        }),\r\n        body: JSON.stringify({refreshToken})\r\n      })\r\n      .then(response => {\r\n        if(response.ok){\r\n            return response.json()\r\n            .then( async json =>{\r\n              console.log(json)\r\n              await this.getAllUsers(json.newTokens.accessToken)\r\n              localStorage.setItem('token', json.newTokens.accessToken)\r\n              localStorage.setItem('refreshToken', json.newTokens.refreshToken)\r\n              this.setState({isActive: json.user.isActive, isLoggedIn: true, user: json.user.email.toString(), showMessage: false, message: {head: '', body: ''}})\r\n          })\r\n        }else if(!response.ok){\r\n          throw Error(response.statusText)\r\n        }\r\n      })\r\n    }catch (error){\r\n      console.log(error)\r\n    }\r\n    finally{\r\n      this.setState({isLoading:false})\r\n    }\r\n    }\r\n  }\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n      {this.state.isLoading ? <p>Loading...</p> :\r\n        <div>\r\n        {this.state.isLoggedIn ? <InterfacePage isActive={this.state.isActive}  logOut={this.logOut} users={this.state.sortedUsers} deleteUser={this.deleteUser} addingUser={this.state.addingUser} popup={this.popup} openPopup={this.state.openPopup} showMessage={this.state.showMessage} sendCreateAccount={this.sendCreateAccount} message={this.state.message} name={this.state.user}/> : <LogInPage hideMessage={this.hideMessage} showMessage={this.state.showMessage} message={this.state.message} sendLogin={this.sendLogin} sendCreateAccount={this.sendCreateAccount} sendResetPassword={this.sendResetPassword}/>}\r\n        </div>\r\n         }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main\r\n"]},"metadata":{},"sourceType":"module"}