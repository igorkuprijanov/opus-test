{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Me\\\\Desktop\\\\opus\\\\client\\\\src\\\\components\\\\Main.tsx\";\nimport React from 'react';\nimport LogInPage from './LogInPage';\nimport InterfacePage from './InterfacePage';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sendData = async (data, url, method) => {\n      const response = await fetch(`http://localhost:4000/${url}`, {\n        method: method,\n        mode: 'cors',\n        headers: this.requestInterceptor(),\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }).then(async response => {\n        if (response.status === 401) {\n          console.log(Error(response.statusText));\n          let newData = await this.responseInterceptor(data, url, method).then(res => {\n            return res;\n          });\n          return newData;\n        }\n\n        return response.json().then(json => {\n          return json;\n        });\n      });\n      return response;\n    };\n\n    this.requestInterceptor = () => {\n      let token = localStorage.getItem('token');\n\n      if (!token) {\n        return new Headers({\n          'Content-Type': 'application/json'\n        });\n      }\n\n      return new Headers({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      });\n    };\n\n    this.responseInterceptor = async (data, url, method) => {\n      let refreshToken = localStorage.getItem('refreshToken');\n      let token = localStorage.getItem('token');\n\n      try {\n        await fetch('http://localhost:4000/refresh', {\n          method: 'POST',\n          mode: 'cors',\n          headers: new Headers({\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }),\n          body: JSON.stringify({\n            refreshToken\n          })\n        }).then(response => {\n          if (response.ok) {\n            return response.json().then(async json => {\n              localStorage.setItem('token', json.newTokens.accessToken);\n              localStorage.setItem('refreshToken', json.newTokens.refreshToken);\n            });\n          } else if (!response.ok) {\n            throw Error(response.statusText);\n          }\n        });\n      } catch (error) {\n        console.log(error);\n      }\n\n      let interceptorResponse = await this.sendData(data, url, method);\n      return interceptorResponse;\n    };\n\n    this.sendLogin = async data => {\n      const response = await this.sendData(data, 'login', 'POST');\n\n      if (response.status) {\n        await this.getAllUsers(response.accessToken);\n        localStorage.setItem('token', response.accessToken);\n        localStorage.setItem('refreshToken', response.refreshToken);\n        this.setState({\n          isActive: response.data.isActive,\n          isLoggedIn: true,\n          user: response.data.email.toString(),\n          showMessage: false,\n          message: {\n            head: '',\n            body: ''\n          }\n        });\n      } else if (!response.status) {\n        this.setState({\n          showMessage: true,\n          message: {\n            head: response.data.head,\n            body: response.data.body\n          }\n        });\n      }\n    };\n\n    this.sendCreateAccount = async (data, byUser) => {\n      if (data.password === data.repeatPassword) {\n        const destination = (() => {\n          return byUser ? 'addUser' : 'registration';\n        })();\n\n        const response = await this.sendData(data, destination, 'POST');\n\n        if (response.status) {\n          if (this.state.openPopup) {\n            this.setState({\n              openPopup: false,\n              unsortedUsers: [...this.state.unsortedUsers, {\n                name: data.email,\n                logs: []\n              }],\n              sortedUsers: this.sortUsers([...this.state.unsortedUsers, {\n                name: data.email,\n                logs: []\n              }])\n            });\n          }\n\n          this.setState({\n            showMessage: true,\n            message: {\n              head: response.data.head,\n              body: response.data.body\n            }\n          });\n        } else if (!response.status) {\n          this.setState({\n            showMessage: true,\n            message: {\n              head: response.data.head,\n              body: response.data.body\n            }\n          });\n        }\n      } else {\n        this.setState({\n          showMessage: true,\n          message: {\n            head: 'Passwords dont match',\n            body: 'Check that both password fields are the same.'\n          }\n        });\n      }\n    };\n\n    this.deleteUser = async name => {\n      await this.sendData({\n        'email': name\n      }, 'delete', 'DELETE').then(response => {\n        if (!response.status) {\n          alert('Could not delete user, please try again');\n        } else {\n          this.popup('delete');\n          let newUsers = this.state.unsortedUsers;\n          let user = newUsers.find(user => {\n            return user.name === name ? user : null;\n          });\n\n          if (user) {\n            let userIndex = newUsers.indexOf(user);\n            newUsers.splice(userIndex, 1);\n          }\n\n          this.setState({\n            unsortedUsers: newUsers,\n            sortedUsers: this.sortUsers(newUsers)\n          });\n        }\n      });\n    };\n\n    this.getAllUsers = async token => {\n      try {\n        await fetch('http://localhost:4000/users', {\n          method: 'GET',\n          mode: 'cors',\n          headers: new Headers({\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          })\n        }).then(response => {\n          if (response.ok) {\n            return response.json().then(json => {\n              this.setState({\n                unsortedUsers: json,\n                sortedUsers: this.sortUsers(json)\n              });\n            });\n          } else if (!response.ok) {\n            throw Error(response.statusText);\n          }\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.logOut = async () => {\n      let refreshToken = localStorage.getItem('refreshToken');\n      await this.sendData({\n        refreshToken\n      }, 'logout', 'POST');\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n      this.setState({\n        isLoggedIn: false,\n        showMessage: false,\n        message: {\n          head: '',\n          body: ''\n        }\n      });\n    };\n\n    this.sendResetPassword = async data => {\n      const response = await this.sendData(data, 'restore', 'POST');\n      this.setState({\n        showMessage: true,\n        message: {\n          head: response.data.head,\n          body: response.data.body\n        }\n      });\n    };\n\n    this.hideMessage = () => {\n      this.setState({\n        showMessage: false\n      });\n    };\n\n    this.sortUsers = data => {\n      let newUsers = [];\n\n      for (let i = 0; i < data.length; i++) {\n        let sliceableArray = data.slice(i * this.state.usersOnPage, this.state.usersOnPage * (i + 1));\n        if (sliceableArray.length > 0) newUsers.push(sliceableArray);\n      }\n\n      return newUsers;\n    };\n\n    this.popup = type => {\n      if (type === 'add') {\n        this.setState({\n          openPopup: !this.state.openPopup,\n          addingUser: true,\n          showMessage: false,\n          message: {\n            head: '',\n            body: ''\n          }\n        });\n      } else {\n        this.setState({\n          openPopup: !this.state.openPopup,\n          addingUser: false\n        });\n      }\n    };\n\n    this.state = {\n      isLoggedIn: false,\n      user: '',\n      showMessage: false,\n      message: {\n        body: '',\n        head: ''\n      },\n      openPopup: false,\n      addingUser: false,\n      unsortedUsers: [],\n      sortedUsers: [],\n      isLoading: false,\n      isActive: false,\n      usersOnPage: 6\n    };\n    this.sendData = this.sendData.bind(this);\n    this.sendLogin = this.sendLogin.bind(this);\n    this.sendCreateAccount = this.sendCreateAccount.bind(this);\n    this.sendResetPassword = this.sendResetPassword.bind(this);\n  }\n\n  async componentDidMount() {\n    let refreshToken = localStorage.getItem('refreshToken');\n\n    if (refreshToken) {\n      this.setState({\n        isLoading: true\n      });\n\n      try {\n        await fetch('http://localhost:4000/refresh', {\n          method: 'POST',\n          mode: 'cors',\n          headers: new Headers({\n            'Content-Type': 'application/json'\n          }),\n          body: JSON.stringify({\n            refreshToken\n          })\n        }).then(response => {\n          if (response.ok) {\n            return response.json().then(async json => {\n              await this.getAllUsers(json.newTokens.accessToken);\n              localStorage.setItem('token', json.newTokens.accessToken);\n              localStorage.setItem('refreshToken', json.newTokens.refreshToken);\n              this.setState({\n                isActive: json.user.isActive,\n                isLoggedIn: true,\n                user: json.user.email.toString(),\n                showMessage: false,\n                message: {\n                  head: '',\n                  body: ''\n                }\n              });\n            });\n          } else if (!response.ok) {\n            throw Error(response.statusText);\n          }\n        });\n      } catch (error) {\n        console.log(error);\n      } finally {\n        this.setState({\n          isLoading: false\n        });\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: this.state.isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 31\n      }, this) : /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            md: 8,\n            children: this.state.isLoggedIn ? /*#__PURE__*/_jsxDEV(InterfacePage, {\n              isActive: this.state.isActive,\n              logOut: this.logOut,\n              users: this.state.sortedUsers,\n              deleteUser: this.deleteUser,\n              addingUser: this.state.addingUser,\n              popup: this.popup,\n              openPopup: this.state.openPopup,\n              showMessage: this.state.showMessage,\n              sendCreateAccount: this.sendCreateAccount,\n              message: this.state.message,\n              name: this.state.user\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 11\n            }, this) : /*#__PURE__*/_jsxDEV(LogInPage, {\n              hideMessage: this.hideMessage,\n              showMessage: this.state.showMessage,\n              message: this.state.message,\n              sendLogin: this.sendLogin,\n              sendCreateAccount: this.sendCreateAccount,\n              sendResetPassword: this.sendResetPassword\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/Me/Desktop/opus/client/src/components/Main.tsx"],"names":["React","LogInPage","InterfacePage","Container","Row","Col","Main","Component","constructor","props","sendData","data","url","method","response","fetch","mode","headers","requestInterceptor","credentials","body","JSON","stringify","then","status","console","log","Error","statusText","newData","responseInterceptor","res","json","token","localStorage","getItem","Headers","refreshToken","ok","setItem","newTokens","accessToken","error","interceptorResponse","sendLogin","getAllUsers","setState","isActive","isLoggedIn","user","email","toString","showMessage","message","head","sendCreateAccount","byUser","password","repeatPassword","destination","state","openPopup","unsortedUsers","name","logs","sortedUsers","sortUsers","deleteUser","alert","popup","newUsers","find","userIndex","indexOf","splice","logOut","removeItem","sendResetPassword","hideMessage","i","length","sliceableArray","slice","usersOnPage","push","type","addingUser","isLoading","bind","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport LogInPage from './LogInPage';\r\nimport InterfacePage from './InterfacePage';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\nclass Main extends React.Component<{}, { usersOnPage: number, isActive: boolean, isLoading: boolean, sortedUsers: Array<Array<{ name:string, logs:Array<string> }>>, unsortedUsers: Array<{ name:string, logs:Array<string> }>, isLoggedIn: boolean, addingUser: boolean, user:string, showMessage: boolean, message: { head: string, body: string }, openPopup: boolean }>{\r\n\r\n  constructor(props: any){\r\n    super(props);\r\n    this.state = {\r\n      isLoggedIn: false,\r\n      user: '',\r\n      showMessage: false,\r\n      message: { body: '', head: '' },\r\n      openPopup: false,\r\n      addingUser: false,\r\n      unsortedUsers: [],\r\n      sortedUsers: [],\r\n      isLoading: false,\r\n      isActive: false,\r\n      usersOnPage: 6,\r\n\r\n    };\r\n    this.sendData = this.sendData.bind(this);\r\n    this.sendLogin = this.sendLogin.bind(this);\r\n    this.sendCreateAccount = this.sendCreateAccount.bind(this);\r\n    this.sendResetPassword = this.sendResetPassword.bind(this);\r\n  }\r\n\r\n  sendData = async (data:any, url:string, method: string) => {\r\n    const response =  await fetch(`http://localhost:4000/${url}`,\r\n      {\r\n        method: method,\r\n        mode: 'cors',\r\n        headers: this.requestInterceptor(),\r\n        credentials: 'include',\r\n        body: JSON.stringify(data),\r\n      })\r\n      .then(async response => {\r\n        if (response.status === 401){\r\n          console.log(Error(response.statusText));\r\n          let newData:any = await this.responseInterceptor(data, url, method)\r\n            .then((res)=>{\r\n              return res;\r\n            });\r\n          return newData;\r\n        }\r\n        return response.json().then(json =>{\r\n          return json;\r\n        });\r\n      });\r\n    return response;\r\n\r\n\r\n  };\r\n\r\n  requestInterceptor = () =>{\r\n    let token = localStorage.getItem('token');\r\n    if (!token){\r\n      return new Headers({\r\n        'Content-Type' : 'application/json',\r\n      });\r\n    }\r\n    return new Headers({\r\n      'Authorization': `Bearer ${token}`,\r\n      'Content-Type' : 'application/json',\r\n    });\r\n  };\r\n\r\n  responseInterceptor = async (data:any, url:string, method:string) =>{\r\n    let refreshToken = localStorage.getItem('refreshToken');\r\n    let token = localStorage.getItem('token');\r\n    try {\r\n      await fetch('http://localhost:4000/refresh',\r\n        {\r\n          method: 'POST',\r\n          mode: 'cors',\r\n          headers: new Headers({\r\n            'Authorization': `Bearer ${token}`,\r\n            'Content-Type' : 'application/json',\r\n          }),\r\n          body: JSON.stringify({ refreshToken }),\r\n        })\r\n        .then(response => {\r\n          if (response.ok){\r\n            return  response.json()\r\n              .then( async json =>{\r\n                localStorage.setItem('token', json.newTokens.accessToken);\r\n                localStorage.setItem('refreshToken', json.newTokens.refreshToken);\r\n              });\r\n          } else if (!response.ok){\r\n            throw Error(response.statusText);\r\n          }\r\n        });\r\n    } catch (error){\r\n      console.log(error);\r\n    }\r\n    let interceptorResponse = await this.sendData(data, url, method);\r\n    return interceptorResponse;\r\n  };\r\n\r\n  sendLogin = async (data: { email: string, password: string }) =>{\r\n    const response = await this.sendData(data, 'login', 'POST');\r\n    if (response.status){\r\n      await this.getAllUsers(response.accessToken);\r\n      localStorage.setItem('token', response.accessToken);\r\n      localStorage.setItem('refreshToken', response.refreshToken);\r\n      this.setState({ isActive: response.data.isActive, isLoggedIn: true, user: response.data.email.toString(), showMessage: false, message: { head: '', body: '' } });\r\n    } else if (!response.status){\r\n      this.setState({\r\n        showMessage: true,\r\n        message: { head: response.data.head, body: response.data.body },\r\n      });\r\n    }\r\n  };\r\n\r\n  sendCreateAccount = async (data: { email: string, password: string, repeatPassword: string }, byUser?:boolean) =>{\r\n    if (data.password === data.repeatPassword){\r\n      const destination = (() => {return byUser ?  'addUser' : 'registration';})();\r\n      const response = await this.sendData(data, destination, 'POST');\r\n      if (response.status){\r\n        if (this.state.openPopup){\r\n          this.setState({\r\n            openPopup: false,\r\n            unsortedUsers: [...this.state.unsortedUsers, { name: data.email, logs:[] }],\r\n            sortedUsers: this.sortUsers([...this.state.unsortedUsers, { name: data.email, logs: [] }]),\r\n          });\r\n        }\r\n        this.setState({\r\n          showMessage: true,\r\n          message: { head: response.data.head, body:response.data.body },\r\n        });\r\n      } else if (!response.status){\r\n        this.setState({\r\n          showMessage: true,\r\n          message: { head: response.data.head, body:response.data.body },\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        showMessage: true,\r\n        message: { head: 'Passwords dont match', body: 'Check that both password fields are the same.' },\r\n      });\r\n    }\r\n  };\r\n\r\n  deleteUser = async (name: string) =>{\r\n    await this.sendData({ 'email':name }, 'delete', 'DELETE')\r\n      .then(response => {\r\n        if (!response.status){\r\n          alert('Could not delete user, please try again');\r\n        } else {\r\n          this.popup('delete');\r\n          let newUsers = this.state.unsortedUsers;\r\n          let user = newUsers.find((user)=>{return user.name === name ? user : null;});\r\n          if (user){\r\n            let userIndex = newUsers.indexOf(user);\r\n            newUsers.splice(userIndex, 1);\r\n          }\r\n          this.setState({\r\n            unsortedUsers: newUsers,\r\n            sortedUsers: this.sortUsers(newUsers),\r\n          });\r\n\r\n        }\n      });\r\n  };\r\n\r\n  getAllUsers = async (token:string) =>{\r\n    try {\r\n      await fetch('http://localhost:4000/users',\r\n        {\r\n          method: 'GET',\r\n          mode: 'cors',\r\n          headers: new Headers({\r\n            'Authorization': `Bearer ${token}`,\r\n            'Content-Type' : 'application/json',\r\n          }),\r\n        })\r\n        .then(response => {\r\n          if (response.ok){\r\n            return response.json()\r\n              .then(json =>{\r\n                this.setState({\r\n                  unsortedUsers: json,\r\n                  sortedUsers: this.sortUsers(json),\r\n                });\r\n              });\r\n          } else if (!response.ok){\r\n            throw Error(response.statusText);\r\n          }\r\n        });\r\n    } catch (error){\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  logOut = async () =>{\r\n    let refreshToken = localStorage.getItem('refreshToken');\r\n    await this.sendData({ refreshToken }, 'logout', 'POST');\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('refreshToken');\r\n    this.setState({ isLoggedIn: false, showMessage: false, message: { head:'', body:'' } });\r\n  };\r\n\r\n\r\n  sendResetPassword = async (data: { email: string }) =>{\r\n    const response = await this.sendData(data, 'restore', 'POST');\r\n    this.setState({\r\n      showMessage: true,\r\n      message: { head: response.data.head, body:response.data.body },\r\n    });\r\n  };\r\n\r\n  hideMessage = () =>{\r\n    this.setState({\r\n      showMessage: false,\r\n    });\r\n  };\r\n\r\n  sortUsers = (data: Array<{ name:string, logs:Array<string> }>) =>{\r\n    let newUsers: Array<Array<{ name:string, logs:Array<string> }>> = [];\r\n    for (let i = 0; i < data.length; i++){\r\n      let sliceableArray = data.slice(i * this.state.usersOnPage, this.state.usersOnPage * (i + 1));\r\n      if (sliceableArray.length > 0)\r\n        newUsers.push(sliceableArray);\r\n    }\r\n    return newUsers;\r\n  };\r\n\r\n  popup = (type: string) =>{\r\n    if (type === 'add'){\r\n      this.setState({\r\n        openPopup: !this.state.openPopup,\r\n        addingUser: true,\r\n        showMessage: false,\r\n        message: { head: '', body: '' },\r\n      });\r\n    } else {\r\n      this.setState({\r\n        openPopup: !this.state.openPopup,\r\n        addingUser: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  async componentDidMount(){\r\n    let refreshToken = localStorage.getItem('refreshToken');\r\n    if (refreshToken){\r\n      this.setState({ isLoading: true });\r\n      try {\r\n        await fetch('http://localhost:4000/refresh',\r\n          {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            headers: new Headers({\r\n              'Content-Type' : 'application/json',\r\n            }),\r\n            body: JSON.stringify({ refreshToken }),\r\n          })\r\n          .then(response => {\r\n            if (response.ok){\r\n              return response.json()\r\n                .then( async json =>{\r\n                  await this.getAllUsers(json.newTokens.accessToken);\r\n                  localStorage.setItem('token', json.newTokens.accessToken);\r\n                  localStorage.setItem('refreshToken', json.newTokens.refreshToken);\r\n                  this.setState({ isActive: json.user.isActive, isLoggedIn: true, user: json.user.email.toString(), showMessage: false, message: { head: '', body: '' } });\r\n                });\r\n            } else if (!response.ok){\r\n              throw Error(response.statusText);\r\n            }\r\n          });\r\n      } catch (error){\r\n        console.log(error);\r\n      } finally {\r\n        this.setState({ isLoading:false });\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n      {this.state.isLoading ? <p>Loading...</p> :\r\n        <Container>\r\n          <Row>\r\n          <Col></Col>\r\n          <Col md={8}>\r\n        {this.state.isLoggedIn ?\r\n          <InterfacePage isActive={this.state.isActive}  logOut={this.logOut} users={this.state.sortedUsers} deleteUser={this.deleteUser} addingUser={this.state.addingUser} popup={this.popup} openPopup={this.state.openPopup} showMessage={this.state.showMessage} sendCreateAccount={this.sendCreateAccount} message={this.state.message} name={this.state.user}/>\r\n          :\r\n          <LogInPage hideMessage={this.hideMessage} showMessage={this.state.showMessage} message={this.state.message} sendLogin={this.sendLogin} sendCreateAccount={this.sendCreateAccount} sendResetPassword={this.sendResetPassword}/>}\r\n          </Col>\r\n          <Col></Col>\r\n          </Row>\r\n        </Container>\r\n         }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n"]},"metadata":{},"sourceType":"module"}